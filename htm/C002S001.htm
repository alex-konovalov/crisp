<html><head><title>[CRISP] 2.1 Creating set theoretical classes</title></head>
<body text="#000000" bgcolor="#ffffff">
<a name = "I1"></a>
<h1>2.1 Creating set theoretical classes</h1><p>
<p>
<a name = "I2"></a>

<a name = "I3"></a>
<li><code>IsClass(</code><var>C</var><code>) C</code>
<p>
returns true if <var>C</var> is a class object. The category of class objects is a
subcategory of the category <code>IsListOrCollection</code>.
<p>
<a name = "I4"></a>
<li><code>Class(</code><var>rec</var><code>) O</code>
<li><code>Class(</code><var>func</var><code>) O</code>
<p>
returns a class <var>C</var>. In the first form, <var>rec</var> must be a record having a
component <code>\in</code> and an optional component <code>name</code>. The values of these
components, if present, are bound to the attributes <code>MemberFunction</code> and
<code>Name</code>(see <a href="../../../doc/htm/ref/C012S008.htm">Name</a>) of the class created. The value bound to <code>\in</code> must be a function
<var>func</var> which returns <code>true</code> if a <font face="helvetica,arial">GAP</font> object belongs to <var>C</var>, and <code>false</code>
otherwise; cf. <a href="C002S002.htm">MemberFunction</a> below. The second form is equivalent to <code>Class(rec(\in
:= </code><var>func</var><code>))</code>. It is the user's responsibility to ensure that <var>func</var> returns the same
result for different <font face="helvetica,arial">GAP</font> objects representing the same mathematical object (or
element, in the <font face="helvetica,arial">GAP</font> sense; see <a href="../../../doc/htm/ref/C012S000.htm">objects and elements</a> in the <font face="helvetica,arial">GAP</font>
reference manual).
<p>
<pre>
gap&gt; RequirePackage ("crisp");
                                                   
             _____  ___    __  ____   ___        
            / ___/ / _ \  / / / __/  / _ \       
           / /__  /   _/ / / _\_ \  / ___/       
           \___/ /_/\_\ /_/ /____/ /_/           
                                                    
              A GAP 4 share package for           
          Computing with Radicals, Injectors        
            Schunck classes and Projectors          
              of finite solvable groups             
                                                    
                By Burkhard H\"ofling               
                                                    
                For help, type ?CRISP               
                                                    
true
gap&gt; FermatPrimes := Class (p -&gt; IsPrime (p) and p = 2^LogInt (p, 2) + 1); 
Class (in:=function( p ) ... end)
</pre>
<p>
<a name = "I6"></a>
<li><code>View(</code><var>class</var><code>)</code>
<p>
If the class does not have a name, this produces a brief description of the
information defining <var>class</var> which has been supplied by the user. If the
class has a name, only its name will be printed.
<p>
<pre>
gap&gt; View (FermatPrimes);
Class (in:=function( p ) ... end)
</pre>
<p>
<a name = "I7"></a>
<li><code>Print(</code><var>class</var><code>)</code>
<p>
<code>Print</code> behaves very similarly to <code>View</code>, except that the defining
information is being printed in a more explicit way if possible.
<p>
<pre>
gap&gt; Print (FermatPrimes);
Class (rec ( in = function ( p )
    return IsPrime( p ) and p = 2 ^ LogInt( p, 2 ) + 1;
end))
</pre>
<p>
<a name = "I8"></a>
<li><code>Display(</code><var>class</var><code>)</code>
<p>
For classes, <code>Display</code> works exactly as <code>Print</code>.
<p>
<a name = "I9"></a>
<li><code></code><var>obj</var><code> in </code><var>class</var><code> </code>
<p>
<a name = "I10"></a>

<a name = "I11"></a>

returns true or false, depending upon whether <var>obj</var> belongs to <var>class</var> or
not. If <var>obj</var> can store attributes, the outcome of the membership test is
stored in an attribute <code>ComputedIsMembers</code> of <var>obj</var>.
<p>
<a name = "I12"></a>
<li><code></code><var>C1</var><code> = </code><var>C2</var><code> </code>
<p>
Since it is not possible to compare classes given by membership algorithms,
two classes are equal in <font face="helvetica,arial">GAP</font> if and only if they are the same <font face="helvetica,arial">GAP</font>
object (see <a href="../../../doc/htm/ref/C012S005.htm">IsIdenticalObj</a> in the <font face="helvetica,arial">GAP</font> reference manual).
<p>
<a name = "I13"></a>
<li><code></code><var>C1</var><code> &lt; </code><var>C2</var><code> </code>
<p>
The operation <code>&lt;</code> for classes has no mathematical meaning; it only exists
so that one can form sorted lists of classes.
<p>
[<a href="index.htm">Top</a>] [<a href = "C002S000.htm">Up</a>] [<a href ="C002S002.htm">Next</a>] [<a href = "theindex.htm">Index</a>]
<P>
<address>CRISP manual<br>November 2000
</address></body></html>