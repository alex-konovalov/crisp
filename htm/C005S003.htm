<html><head><title>[CRISP] 5.3 Creating Fitting sets</title></head>
<body bgcolor="ffffff">
<a name = "I11"></a>
<h1>5.3 Creating Fitting sets</h1><p>
<p>
<a name = "I12"></a>

A nonempty set <font size="+1"><font face="helvetica"><i>F</i></font></font> of subgroups of a group <font size="+1"><i>G</i></font> is a <strong>Fitting set of
<font size="+1"><i>G</i></font></strong>  if it satisfies the following properties:
<p>
<dl compact>
<dt>(1)<dd>  if <font size="+1"><i>H</i></font> belongs to <font size="+1"><font face="helvetica"><i>F</i></font></font> and <font size="+1"><i>K</i></font> is normal in <font size="+1"><i>H</i></font>, then <font size="+1"><i>K</i></font> 
           belongs to <font size="+1"><font face="helvetica"><i>F</i></font></font>;
<p>
<dt>(2)<dd>  if <font size="+1"><i>H</i></font> and <font size="+1"><i>K</i></font> belong to <font size="+1"><font face="helvetica"><i>F</i></font></font>, and <font size="+1"><i>H</i></font> and <font size="+1"><i>K</i></font> are normal in
<font size="+1"><font face="symbol">‡</font><i>H</i>, <i>K</i> <font face="symbol">–</font></font>, then <font size="+1"><font face="symbol">‡</font><i>H</i>, <i>K</i> <font face="symbol">–</font> =  <i>H</i> <i>K</i></font> belongs to <font size="+1"><font face="helvetica"><i>F</i></font></font>;
<p>
<dt>(3)<dd>  if <font size="+1"><i>H</i></font> is in <font size="+1"><font face="helvetica"><i>F</i></font></font> and <font size="+1"><i>g</i>  <font face="symbol">ë</font> <i>G</i></font>, then <font size="+1"><i>H</i><sup><i>g</i></sup></font> also belongs to 
           <font size="+1"><font face="helvetica"><i>F</i></font></font>.
</dl>
<p>
Note that a Fitting set <var>fitset</var> of the group&nbsp;<font size="+1"><i>G</i></font> is a subset of the set of all
subgroups of&nbsp;<font size="+1"><i>G</i></font>. Therefore it is not closed under group
isomorphisms, hence  is <strong>not</strong> a group class. If <font size="+1"><i>H</i></font> is a subgroup of <font size="+1"><i>G</i></font>, then the
subgroups of <font size="+1"><i>G</i></font> in <var>fitset</var> which are contained in <font size="+1"><i>H</i></font> form a Fitting set of <font size="+1"><i>H</i></font>.
We will not distinguish between <var>fitset</var> and the arising Fitting set of <font size="+1"><i>H</i></font>. 
Moreover, if  <var>fit</var> is a Fitting class and <var>grp</var> is a group, then the set of all
subgroups of <var>grp</var> which belong to <var>fit</var> is a Fitting set of <var>grp</var>.
<p>
<a name = "I13"></a>
<li><code>IsFittingSet(</code><var>G</var><code>, </code><var>fitset</var><code>) O</code>
<p>
tests whether <var>fitset</var> (or, more precisely, the set of all subgroups of <font size="+1"><i>G</i></font>
which are contained in  <var>fitset</var>) is a Fitting set of the group <var>G</var>. Thus if
<var>fitset</var> is a Fitting class, or if
<var>G</var> is a subgroup of the group <var>H</var> and <var>fitset</var> is a Fitting set of <var>H</var>,
then <code>IsFittingSet(</code><var>G</var><code>, </code><var>fitset</var><code>)</code> will return <code>true</code>.
<p>
<a name = "I14"></a>
<li><code>FittingSet(</code><var>G</var><code>, </code><var>rec</var><code>) O</code>
<p>
returns the Fitting set <var>fitset</var> of the group <var>G</var>, defined by the entries of the
record <var>rec</var>. Note that, although it would be possible to test whether <var>rec</var> 
defines a Fitting set, such a test
is not performed, since it would be extremely expensive, even for relatively
small groups.
<p>
<var>rec</var> may have components <code>\in</code>, <code>inj</code>, <code>rad</code>, and <code>name</code>. The
functions assigned to the components are stored in the attributes
<code>MemberFunction</code> (see <a href="C002S002.htm">MemberFunction</a>), <code>InjectorFunction</code>, 
<code>RadicalFunction</code>, and <code>Name</code>, of <var>fitset</var>. The latter functions must have one
argument, <var>H</var>, which will be a subgroup of <var>G</var>, and return a
<var>fitset</var>-injector and the <var>fitset</var>-radical of <var>H</var>, respectively. 
<p>
Note that at present, every Fitting set has to be a class (see <a href="C002S000.htm">Set theoretical classes</a>). The second example below shows how to define a Fitting set from 
a list of subgroups.
<p>
<pre>
gap&gt;  fitset := FittingSet(SymmetricGroup (4), rec(
&gt;        \in := S -&gt; IsSubgroup (AlternatingGroup (4), S),
&gt;        rad := S -&gt; Intersection (AlternatingGroup (4), S),
&gt;        inj := S -&gt; Intersection (AlternatingGroup (4), S)));
FittingSet (SymmetricGroup( 
[ 1 .. 4 ] ), rec (in:=function( S ) ... end, rad:=function( S ) ... end, inj:\
=function( S ) ... end))
gap&gt; FittingSet (SymmetricGroup (3), rec(
&gt;       \in := H -&gt; H in [Group (()), Group ((1,2)), Group ((1,3)), Group ((2,3))]));
FittingSet (SymmetricGroup( [ 1 .. 3 ] ), rec (in:=function( H ) ... end))
</pre>
<p>
<a name = "I15"></a>
<li><code>ImageFittingSet(</code><var>alpha</var><code>, </code><var>fitset</var><code>) O</code>
<p>
returns the image <var>F_1</var> of the Fitting set <var>fitset</var> under the group homomorphism 
<var>alpha</var>, i.e.
the Fitting set <var>F_1</var> of <code>Image(</code><var>alpha</var><code>)</code> which consists of all subgroups
<code></code><var>alpha</var><code>(</code><var>S</var><code>)</code> of <code>Image(</code><var>alpha</var><code>)</code> such that <var>S</var> is a <var>fitset</var>-injector of 
<code>PreImage(</code><var>alpha</var><code>, </code><var>S</var><code>)</code>. <var>fitset</var> must be a Fitting set of <code>PreImage(</code><var>alpha</var><code>)</code>
or a Fitting class.  Note that the image of a Fitting class is a
Fitting set but not a Fitting class.
<p>
<pre>
gap&gt; alpha := GroupHomomorphismByImages (SymmetricGroup (4), SymmetricGroup (3),
&gt;  [(1,2), (1,3), (1,4)], [(1,2), (1,3), (2,3)]);;
gap&gt; im := ImageFittingSet (alpha, fitset);
FittingSet (Group( [ (1,2), (1,3), (2,3) 
 ] ), rec (inj:=function( G ) ... end))
gap&gt; Radical (Image (alpha), im);
Group([ (1,2,3), (1,3,2) ])
</pre>
<p>
<a name = "I16"></a>
<li><code>PreImageFittingSet(</code><var>alpha</var><code>, </code><var>fitset</var><code>) O</code>
<p>
returns the preimage <var>fitset_0</var> of the Fitting set <var>fitset</var> of <code>Image(</code><var>alpha</var><code>)</code> under the group homomorphism <var>alpha</var>. It consists of all
subgroups <var>S</var> of <code>PreImage(</code><var>alpha</var><code>)</code> which are subnormal in <code>PreImage(</code><var>alpha</var><code>, </code><var>T</var><code>)</code> for some <var>T</var> in <var>fitset</var>. <var>fitset</var> must be a Fitting set of
<code>Image(</code><var>alpha</var><code>)</code> or a Fitting class. 
<p>
Note that the preimage of a Fitting class is just a Fitting set but 
not a Fitting class.
<p>
Moreover, <code>ImageFittingSet(PreImageFittingSet(</code><var>fitset</var><code>, </code><var>alpha</var><code>),
</code><var>alpha</var><code>)</code> equals <var>fitset</var> but in general, <var>fitset</var> is not contained in
<code>PreImageFittingSet(ImageFittingSet(</code><var>fitset</var><code>, </code><var>alpha</var><code>), </code><var>alpha</var><code>)</code>; see
e.g. Example VIII,&nbsp;2.16 of&nbsp;<a href="biblio.htm#DH92"><cite>DH92</cite></a>.
<p>
<pre>
gap&gt; pre := PreImageFittingSet (alpha, NilpotentGroups);
FittingSet (SymmetricGroup( [ 1 .. 4 ] ), rec (inj:=function( G ) ... end))
gap&gt; Injector (Source (alpha), pre);
Group([ (1,4)(2,3), (1,2)(3,4), (2,3,4) ])
</pre>
<p>
<a name = "I17"></a>
<li><code>Intersection(</code><var>fitset1</var><code>, </code><var>fitset2</var><code>)</code>
<p>
Let <var>fitset1</var> and <var>fitset2</var> be Fitting sets of the groups <var>G1</var> and <var>G2</var>. 
Then the intersection of <var>fitset1</var> and <var>fitset2</var> will be a Fitting set of the 
intersection of <var>G1</var> and <var>G2</var>, provided that <var>G1</var> and <var>G2</var> lie in some 
common supergroup.
<p>
<pre>
gap&gt; F1 := FittingSet (SymmetricGroup (3),
&gt; rec (\in := IsNilpotent, rad := FittingSubgroup));
FittingSet (SymmetricGroup( 
[ 1 .. 3 ] ), rec (in:=&lt;Operation "IsNilpotent"&gt;, rad:=&lt;Operation "FittingSubg\
roup"&gt;))
gap&gt; F2 := FittingSet (AlternatingGroup (4),
&gt; rec (\in := ReturnTrue, rad := H -&gt; H));
FittingSet (AlternatingGroup( 
[ 1 .. 4 ] ), rec (in:=function(  ) ... end, rad:=function( H ) ... end))
gap&gt; F := Intersection (F1, F2);
FittingSet (Group( 
[ (1,2,3) ] ), rec (in:=function( x ) ... end, rad:=function( G ) ... end))
gap&gt; Intersection (F1, PiGroups ([2,5]));
FittingSet (SymmetricGroup( 
[ 1 .. 3 ] ), rec (in:=function( x ) ... end, rad:=function( G ) ... end))
</pre>
<p>
[<a href="index.htm">Top</a>] [<a href ="C005S002.htm">Previous</a>] [<a href = "C005S000.htm">Up</a>] [<a href ="C005S004.htm">Next</a>] [<a href = "theindex.htm">Index</a>]
<P>
<address>CRISP manual<br>November 2000
</address></body></html>