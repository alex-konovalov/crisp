<html><head><title>[CRISP] 4.1 Creating Schunck classes</title></head>
<body bgcolor="ffffff">
<a name = "I1"></a>
<h1>4.1 Creating Schunck classes</h1><p>
<p>
<a name = "I2"></a>

A class <font size="+1"><font face="helvetica"><i>C</i></font></font> of finite groups is a <strong>Schunck class</strong> if a finite group
<font size="+1"><i>G</i></font> belongs to <font size="+1"><font face="helvetica"><i>C</i></font></font> if and only if all its primitive factor groups
belong to <font size="+1"><font face="helvetica"><i>C</i></font></font>. In particular, a Schunck class is nonempty and closed
with respect to factor groups. By definition, a Schunck class <font size="+1"><font face="helvetica"><i>C</i></font></font> is
determined by the primitive groups which it contains (the basis of <font size="+1"><font face="helvetica"><i>C</i></font></font>),
or by the primitive groups not in <font size="+1"><font face="helvetica"><i>C</i></font></font> but all of whose proper factor
groups belong to <font size="+1"><font face="helvetica"><i>C</i></font></font> (the boundary of <font size="+1"><font face="helvetica"><i>C</i></font></font>).
<p>
<a name = "I3"></a>
<li><code>SchunckClass(</code><var>rec</var><code>) O</code>
<p>
returns a Schunck class defined by the information stored in the record
<var>rec</var>. Note that it is the user's responsibility to ensure that <var>rec</var> really
defines a Schunck class. <var>rec</var> may have the following components: <code>\in</code>,
<code>proj</code>, <code>bound</code>, <code>char</code>, and <code>name</code>. The values bound to these entries, if
present, are stored, respectively, in the attributes <code>MemberFunction</code>, <code>ProjectorFunction</code>,
<code>BoundaryFunction</code>, <code>Characteristic</code>, and <code>Name</code>.
<p>
At least one of the attributes <code>MemberFunction</code>, <code>ProjectorFunction</code>, or
<code>BoundaryFunction</code> must be present in order to be able to compute
with a Schunck class. 
<p>
<pre>
gap&gt; nilp := SchunckClass (rec (bound := G -&gt; not IsCyclic (G),
&gt;        name := "class of all nilpotent groups"));
class of all nilpotent groups
gap&gt; DihedralGroup (8) in nilp;
true
gap&gt; SymmetricGroup (3) in nilp;
false
</pre>
<p>
[<a href="index.htm">Top</a>] [<a href = "C004S000.htm">Up</a>] [<a href ="C004S002.htm">Next</a>] [<a href = "theindex.htm">Index</a>]
<P>
<address>CRISP manual<br>November 2000
</address></body></html>